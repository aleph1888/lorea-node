lorea_setup_apache() {
    test -z "$LOREA_HOST" -o -z "$LOREA_IP" -o -z "$LOREA_DIR" && return 1
    _lorea_env

    local vhost_conf="/etc/apache2/sites-available/$LOREA_HOST"

    if [ -f "$vhost_conf" ]; then
        echo "    - Configuration already exists!  Backing up to $vhost_conf.old"
        sudo cp $vhost_conf $vhost_conf.old
    fi
    # Create or update Apache configuration
    sed -e \
        "s/LOREA_HOST/$LOREA_HOST/g; \
        s/LOREA_IP/$LOREA_IP/g; \
        s#LOREA_DIR#$LOREA_DIR#g; \
        s/LOREA_ENV/$LOREA_ENV/g" \
        $ETC/apache2/lorea.example.net > $TMP/$LOREA_HOST
    sudo mv $TMP/$LOREA_HOST $vhost_conf
    sudo chown root:root $vhost_conf
    sudo chmod 0644 $vhost_conf

    OS_etc_hosts
    
    sudo a2enmod rewrite &>/dev/null
    sudo a2ensite $LOREA_HOST &>/dev/null
    test -z $conf_changed && sudo /etc/init.d/apache2 restart
}

lorea_setup_config() {
    local var="$1"
    local val="$2"

    $LOREA["$var"]="$val"
}

lorea_setup_dirs() {
    test -d $TMP || mkdir -p $TMP/{cache,pids,sockets}
}

lorea_setup_status() {
    echo -e "\n  .:| Lorea Setup For $LOREA_USER |:.\n"
    echo "  Local repository:   $LOREA_DIR"
    if [ ! -d "$LOREA_DIR/.git" ]; then
        echo "  - The lorea-node repository is missing."
    fi
    if [ -x $(which lorea) ]; then
        echo "  + The lorea command is in PATH."
    else
        echo "  - The lorea command is not in PATH."
    fi
    if [ -d $ELGG ]; then
        echo "  + Elgg 1.8 sources are present."
    else
        echo "  - Elgg 1.8 sources are missing."
    fi
    if [ -d $ELGG/mod/lorea_framework ]; then
        echo "  + Lorea Framework is present"
    else
        echo "  - Lorea Framework is not installed."
    fi
    if [ -d $HUB ]; then
        echo "  + $(lorea_status_node_count)"
    else
        echo "  - To create your first node, type lorea node new"
    fi
}

lorea_setup_tools() {
    # Setup Myamoto
    say " + Setting up Myamoto (noop)"
    # Setup Cryptobot
    say " + Setting up Cryptobot (noop)"
    if [ "127.0.0.1" = "$LOREA_IP" ]; then
        # Local node: setup Desktop tools
        say " + Setting up Desktop tools (noop)"
    fi
}

lorea_setup_user() { _installer_run_user_setup; }

_installer_init_elgg_git() {
    test -d "$ELGG" && return 0

    _lorea_env

    cd $LOREA_DIR

    local gsa="git submodule add"
    local repo="https://github.com/lorea/Elgg.git"
    local branch="master"
    test "development" = "$LOREA_ENV" && branch="development" && gsa="$gsa -b $branch"
    $gsa $repo elgg && git submodule init elgg && git submodule update elgg
}

_installer_run_user_setup() {
    mkdir -m 0700 "$HOME/.config/lorea" || true
    local extra_config=""
    local o=
    for var in ${!LOREA_@}; do
        o=$(eval echo \$$var)
        test -z "$var" && echo "  $var is not set" || echo "  $var=\"$o\""
        echo " *  Change $var or press Enter to continue"
        read -e -i "$o" -p '    => ' val
        if [ -n "$val" -a "x$val" != "x$o" ]; then
            $var="$val"
            extra_config=$(echo -e "$var=\"$val\"\n$extra_config")
            echo "  $var set to $val"
        else
            echo "  $var unchanged ($o)"
        fi
    done
    cat > "$HOME/.config/lorea/rc" <<EOF
# -*- Mode: shell-script -*-
#
## User Configuration for lorea-node
#
# This is a shell fragment sourced by the lorea command.
# DO NOT EDIT THIS FILE: use the 'lorea setup' command instead.
#
## LOREA_DIR
#
# Path to your local copy of the lorea-node Git repository.
#
# You can override the default ~/lorea-node to point to your own repo.
# For a shared installation, you might use /usr/share/lorea/.
# 
LOREA_DIR="$LOREA_DIR"
#
# You can override any default configuration by setting a different
# value in this file.  All values are defined in etc/lorearc.
#
$extra_config
#
# File generated at $(date +%F_%T) by $0
#
EOF
    mkdir -m 0755 "$HOME/.local/share/lorea" || true
}

#lorea_installer_install_framework() {
#    # Fetch all modules according to LOREA_ENV 
#    # Link them into the elgg/mod dir.
#    if [ -x git ]; then
#        for module in `/bin/ls plugins`; do
#            local d=$(basename $module)
#            test -x elgg/mod/$d || ln -s $(absolute_path $module) $(absolute_path elgg/mod/)
#        done
#    else
#        say "xxx Oops...  Not implemented: you need git."
#    fi
#    echo 0
#}

lorea_installer_elgg_prereqs() {

    say "=== Checking for Elgg 1.8 Dependencies ==="

    if [ "$(php5 -v | (read a b c; echo $b))" > "5.2" ]; then
        HAVE_PHP5="yes"
    else
        say "The installed version of PHP is too old. (Need >=5.2)"
        HAVE_PHP5="no"
    fi

}

lorea_installer_setup_user() {
    test -z "$LOREA_USER" -o -z "$WWW_GROUP" && return 1

    grep $WWW_GROUP /etc/group &>/dev/null
    if [ 1 -eq $? ]; then
        # Create custom group
        sudo addgroup $WWW_GROUP
    fi

    id -un $LOREA_USER &>/dev/null
    if [ 1 -eq $? ]; then 
        # Create user
        # The --gid expects Debian-like users with primary group the username
        sudo adduser --system \
            --home /home/$LOREA_USER \
            --gecos "Lorea User" \
            --gid $(id -g $WWW_GROUP) \
            --shell /bin/bash \
            $LOREA_USER
    fi

}

lorea_setup_init() {
    test -d $ELGG || lorea_setup_elgg_repo
    test -d $TMP  || lorea_setup_dirs
}
